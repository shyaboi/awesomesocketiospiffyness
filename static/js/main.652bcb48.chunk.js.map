{"version":3,"sources":["components/chat/index.js","App.js","serviceWorker.js","index.js"],"names":["Nard","state","messages","sendMessage","bind","this","socket","io","on","message","setState","event","body","target","value","keyCode","from","emit","type","placeholder","onKeyUp","map","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uWA2DeA,E,kDApDX,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,SAAU,IAGd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPT,E,gEAUO,IAAD,OAEhBC,KAAKC,OAASC,IAAG,yBACjBF,KAAKC,OAAOE,GAAG,WAAW,SAACC,GACvB,EAAKC,SAAS,CAACR,SAAS,CAAEO,GAAH,mBAAe,EAAKR,MAAMC,kB,kCAI7CS,GAER,IAAMC,EAAOD,EAAME,OAAOC,MAC1B,GAAsB,KAAlBH,EAAMI,SAAkBH,EAAM,CAC9B,IAAIH,EAAU,CACVG,OACAI,KAAM,WAEVX,KAAKK,SAAS,CACVR,SAAS,CACLO,GADI,mBAEDJ,KAAKJ,MAAMC,aAGtBG,KAAKC,OAAOW,KAAK,UAAWR,M,+BAMhC,OACI,uCACI,2BAAOS,KAAK,OAAOC,YAAY,eAAeC,QAASf,KAAKF,cAE5DE,KAAKJ,MAAMC,SAASmB,KAAI,SAACZ,GACrB,OACI,2BAAIA,EAAQG,KAAZ,SAAwBH,EAAQO,SAL5C,S,GAzCOM,IAAMC,WCSVC,MAVf,WAEQ,OACI,6BACE,kBAAC,EAAD,QCIMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.652bcb48.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nimport io from \"socket.io-client\";\r\n\r\nclass Nard extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            messages: []\r\n        }\r\n\r\n        this.sendMessage = this.sendMessage.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.socket = io('http://localhost:5000')\r\n        this.socket.on('message', (message) => {\r\n            this.setState({messages: [message, ...this.state.messages]})\r\n              })\r\n    }\r\n\r\n    sendMessage(event) {\r\n\r\n        const body = event.target.value\r\n        if (event.keyCode === 13 && body) {\r\n            let message = {\r\n                body,\r\n                from: 'shyaboi'\r\n            }\r\n            this.setState({\r\n                messages: [\r\n                    message,\r\n                    ...this.state.messages\r\n                ]\r\n            })\r\n            this.socket.emit('message', message)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>shyaboi\r\n                <input type='text' placeholder='message here' onKeyUp={this.sendMessage}/>\r\n                {\r\n                this.state.messages.map((message) => {\r\n                    return (\r\n                        <p>{message.body}-from-{message.from}</p>\r\n                    )\r\n                })\r\n            } </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nard;\r\n","import React from 'react';\nimport './App.css';\nimport Nard from \"../src/components/chat\";\n\nfunction App() {\n\n        return (\n            <div>\n              <Nard />\n             </div>\n        );\n    }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}